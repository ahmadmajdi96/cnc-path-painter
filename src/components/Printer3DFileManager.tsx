
import React, { useState, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Trash2, Upload, Download, Send } from 'lucide-react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface Printer3DFile {
  id: string;
  name: string;
  models: any[];
  created_at: string;
  is_loaded: boolean;
}

interface Printer3DFileManagerProps {
  selectedMachineId?: string;
  selectedEndpoint?: string;
}

export const Printer3DFileManager = ({ 
  selectedMachineId, 
  selectedEndpoint 
}: Printer3DFileManagerProps) => {
  const [fileName, setFileName] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch saved configurations
  const { data: savedConfigs, isLoading } = useQuery({
    queryKey: ['printer_3d_configurations', selectedMachineId],
    queryFn: async () => {
      if (!selectedMachineId) return [];
      const { data, error } = await supabase
        .from('printer_3d_configurations')
        .select('*')
        .eq('printer_id', selectedMachineId)
        .order('created_at', { ascending: false });
      if (error) throw error;
      return data.map(config => ({
        id: config.id,
        name: `Config_${config.id.substring(0, 8)}`,
        models: Array.isArray(config.models) ? config.models : [],
        created_at: config.created_at,
        is_loaded: false
      }));
    },
    enabled: !!selectedMachineId,
  });

  const deleteConfigMutation = useMutation({
    mutationFn: async (configId: string) => {
      const { error } = await supabase
        .from('printer_3d_configurations')
        .delete()
        .eq('id', configId);
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['printer_3d_configurations', selectedMachineId] });
      toast({
        title: "Success",
        description: "Configuration deleted successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to delete configuration",
        variant: "destructive"
      });
    },
  });

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        // Parse G-code or STL file
        console.log('Uploaded file content:', content);
        toast({
          title: "File Uploaded",
          description: `${file.name} uploaded successfully`,
        });
      } catch (error) {
        toast({
          title: "Upload Error",
          description: "Failed to parse uploaded file",
          variant: "destructive"
        });
      }
    };
    reader.readAsText(file);
  };

  const handleDownloadConfig = (config: Printer3DFile) => {
    const gcode = generateGCodeFromConfig(config.models);
    const blob = new Blob([gcode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${config.name}.gcode`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Complete",
      description: `${config.name}.gcode downloaded successfully`
    });
  };

  const generateGCodeFromConfig = (models: any[]): string => {
    let gcode = '; 3D Printer Configuration\n';
    gcode += '; Generated by 3D Printer Control System\n\n';
    
    models.forEach((model, index) => {
      gcode += `; Model ${index + 1}: ${model.filename || 'Unknown'}\n`;
      gcode += `; Position: X${model.position?.[0] || 0} Y${model.position?.[1] || 0} Z${model.position?.[2] || 0}\n`;
      gcode += `; Rotation: X${model.rotation?.[0] || 0} Y${model.rotation?.[1] || 0} Z${model.rotation?.[2] || 0}\n`;
      gcode += `; Scale: X${model.scale?.[0] || 1} Y${model.scale?.[1] || 1} Z${model.scale?.[2] || 1}\n\n`;
    });
    
    gcode += '; End of configuration\n';
    return gcode;
  };

  const handleSendConfiguration = async () => {
    if (!selectedEndpoint) {
      toast({
        title: "Configuration Error",
        description: "Please select an endpoint first",
        variant: "destructive"
      });
      return;
    }

    const configData = {
      machineId: selectedMachineId,
      endpoint: selectedEndpoint,
      configurations: savedConfigs
    };

    try {
      console.log('Sending configuration:', configData);
      toast({
        title: "Configuration Sent",
        description: `Configuration sent to ${selectedEndpoint}`
      });
    } catch (error) {
      toast({
        title: "Send Failed",
        description: "Failed to send configuration to endpoint",
        variant: "destructive"
      });
    }
  };

  return (
    <Card className="bg-white border border-gray-200">
      <CardHeader>
        <CardTitle className="text-lg">File Manager</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Upload Section */}
        <div className="flex gap-2">
          <Input
            type="text"
            placeholder="File name..."
            value={fileName}
            onChange={(e) => setFileName(e.target.value)}
            className="flex-1"
          />
          <Button 
            onClick={() => fileInputRef.current?.click()} 
            variant="outline"
            size="sm"
          >
            <Upload className="w-4 h-4 mr-2" />
            Upload G-Code
          </Button>
          <input
            ref={fileInputRef}
            type="file"
            accept=".gcode,.stl,.obj,.3mf"
            onChange={handleFileUpload}
            className="hidden"
          />
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Button 
            onClick={handleSendConfiguration}
            disabled={!selectedEndpoint || !selectedMachineId}
            size="sm"
          >
            <Send className="w-4 h-4 mr-2" />
            Send Configuration
          </Button>
        </div>

        {/* Configuration Status */}
        <div className="p-3 bg-blue-50 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <span>Configuration Status:</span>
            <div className="flex items-center gap-2">
              <span className={selectedMachineId ? "text-green-600" : "text-orange-600"}>
                Machine: {selectedMachineId ? "Selected" : "Not Selected"}
              </span>
              <span>•</span>
              <span className={selectedEndpoint ? "text-green-600" : "text-orange-600"}>
                Endpoint: {selectedEndpoint ? "Selected" : "Not Selected"}
              </span>
            </div>
          </div>
        </div>

        {/* Saved Configurations */}
        <div className="space-y-2">
          <h4 className="font-medium">Saved Configurations</h4>
          {isLoading ? (
            <div className="text-center py-4 text-gray-500">Loading configurations...</div>
          ) : savedConfigs && savedConfigs.length > 0 ? (
            <div className="space-y-2">
              {savedConfigs.map((config) => (
                <div
                  key={config.id}
                  className={`flex items-center justify-between p-2 border rounded-md ${
                    config.is_loaded ? 'bg-blue-50 border-blue-500' : 'border-gray-200'
                  }`}
                >
                  <div>
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-sm">{config.name}</span>
                      {config.is_loaded && <Badge variant="secondary">Loaded</Badge>}
                    </div>
                    <p className="text-xs text-gray-500">
                      {config.models.length} model(s) • Created: {new Date(config.created_at).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      onClick={() => handleDownloadConfig(config)}
                      size="sm"
                      variant="outline"
                    >
                      <Download className="w-4 h-4" />
                    </Button>
                    <Button
                      onClick={() => deleteConfigMutation.mutate(config.id)}
                      size="sm"
                      variant="ghost"
                      disabled={deleteConfigMutation.isPending}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-4 text-gray-500">No saved configurations.</div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
