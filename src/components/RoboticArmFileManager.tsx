
import React, { useState, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Trash2, Upload, Download, Send } from 'lucide-react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface RoboticArmFile {
  id: string;
  name: string;
  path_data: any;
  created_at: string;
  is_loaded: boolean;
}

interface RoboticArmFileManagerProps {
  selectedMachineId?: string;
  selectedEndpoint?: string;
}

export const RoboticArmFileManager = ({ 
  selectedMachineId, 
  selectedEndpoint 
}: RoboticArmFileManagerProps) => {
  const [toolpathName, setToolpathName] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch saved motion paths
  const { data: savedPaths, isLoading } = useQuery({
    queryKey: ['motion_paths', selectedMachineId],
    queryFn: async () => {
      if (!selectedMachineId) return [];
      const { data, error } = await supabase
        .from('motion_paths')
        .select('*')
        .eq('robotic_arm_id', selectedMachineId)
        .order('created_at', { ascending: false });
      if (error) throw error;
      return data.map(path => ({
        id: path.id,
        name: path.name,
        path_data: path.path_data,
        created_at: path.created_at,
        is_loaded: false
      }));
    },
    enabled: !!selectedMachineId,
  });

  const deletePathMutation = useMutation({
    mutationFn: async (pathId: string) => {
      const { error } = await supabase
        .from('motion_paths')
        .delete()
        .eq('id', pathId);
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['motion_paths', selectedMachineId] });
      toast({
        title: "Success",
        description: "Motion path deleted successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to delete motion path",
        variant: "destructive"
      });
    },
  });

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        // Parse G-code or motion file
        console.log('Uploaded file content:', content);
        toast({
          title: "File Uploaded",
          description: `${file.name} uploaded successfully`,
        });
      } catch (error) {
        toast({
          title: "Upload Error",
          description: "Failed to parse uploaded file",
          variant: "destructive"
        });
      }
    };
    reader.readAsText(file);
  };

  const handleDownloadPath = (path: RoboticArmFile) => {
    const gcode = generateGCodeFromPath(path.path_data);
    const blob = new Blob([gcode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${path.name}.gcode`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Complete",
      description: `${path.name}.gcode downloaded successfully`
    });
  };

  const generateGCodeFromPath = (pathData: any): string => {
    let gcode = '; Robotic Arm Motion Path\n';
    gcode += '; Generated by Robotic Arms Control System\n\n';
    
    if (Array.isArray(pathData)) {
      pathData.forEach((step, index) => {
        gcode += `; Step ${index + 1}\n`;
        if (step.jointAngles) {
          step.jointAngles.forEach((angle: number, jointIndex: number) => {
            gcode += `G1 J${jointIndex + 1}${angle.toFixed(3)} ; Joint ${jointIndex + 1}\n`;
          });
        }
        gcode += `G4 P${step.duration || 1000} ; Dwell for ${step.duration || 1000}ms\n\n`;
      });
    }
    
    gcode += '; End of program\n';
    return gcode;
  };

  const handleSendConfiguration = async () => {
    if (!selectedEndpoint) {
      toast({
        title: "Configuration Error",
        description: "Please select an endpoint first",
        variant: "destructive"
      });
      return;
    }

    const configData = {
      machineId: selectedMachineId,
      endpoint: selectedEndpoint,
      paths: savedPaths
    };

    try {
      console.log('Sending configuration:', configData);
      toast({
        title: "Configuration Sent",
        description: `Configuration sent to ${selectedEndpoint}`
      });
    } catch (error) {
      toast({
        title: "Send Failed",
        description: "Failed to send configuration to endpoint",
        variant: "destructive"
      });
    }
  };

  return (
    <Card className="bg-white border border-gray-200">
      <CardHeader>
        <CardTitle className="text-lg">Motion Path Manager</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Upload Section */}
        <div className="flex gap-2">
          <Input
            type="text"
            placeholder="Motion path name..."
            value={toolpathName}
            onChange={(e) => setToolpathName(e.target.value)}
            className="flex-1"
          />
          <Button 
            onClick={() => fileInputRef.current?.click()} 
            variant="outline"
            size="sm"
          >
            <Upload className="w-4 h-4 mr-2" />
            Upload G-Code
          </Button>
          <input
            ref={fileInputRef}
            type="file"
            accept=".gcode,.nc,.txt"
            onChange={handleFileUpload}
            className="hidden"
          />
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Button 
            onClick={handleSendConfiguration}
            disabled={!selectedEndpoint || !selectedMachineId}
            size="sm"
          >
            <Send className="w-4 h-4 mr-2" />
            Send Configuration
          </Button>
        </div>

        {/* Configuration Status */}
        <div className="p-3 bg-blue-50 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <span>Configuration Status:</span>
            <div className="flex items-center gap-2">
              <span className={selectedMachineId ? "text-green-600" : "text-orange-600"}>
                Machine: {selectedMachineId ? "Selected" : "Not Selected"}
              </span>
              <span>â€¢</span>
              <span className={selectedEndpoint ? "text-green-600" : "text-orange-600"}>
                Endpoint: {selectedEndpoint ? "Selected" : "Not Selected"}
              </span>
            </div>
          </div>
        </div>

        {/* Saved Paths */}
        <div className="space-y-2">
          <h4 className="font-medium">Saved Motion Paths</h4>
          {isLoading ? (
            <div className="text-center py-4 text-gray-500">Loading motion paths...</div>
          ) : savedPaths && savedPaths.length > 0 ? (
            <div className="space-y-2">
              {savedPaths.map((path) => (
                <div
                  key={path.id}
                  className={`flex items-center justify-between p-2 border rounded-md ${
                    path.is_loaded ? 'bg-blue-50 border-blue-500' : 'border-gray-200'
                  }`}
                >
                  <div>
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-sm">{path.name}</span>
                      {path.is_loaded && <Badge variant="secondary">Loaded</Badge>}
                    </div>
                    <p className="text-xs text-gray-500">
                      Created: {new Date(path.created_at).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      onClick={() => handleDownloadPath(path)}
                      size="sm"
                      variant="outline"
                    >
                      <Download className="w-4 h-4" />
                    </Button>
                    <Button
                      onClick={() => deletePathMutation.mutate(path.id)}
                      size="sm"
                      variant="ghost"
                      disabled={deletePathMutation.isPending}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-4 text-gray-500">No saved motion paths.</div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
